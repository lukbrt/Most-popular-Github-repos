{"version":3,"sources":["components/Button.js","components/RepoBox.js","components/RepoGrid.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Button","state","selected","language","this","props","react_default","a","createElement","className","key","Link","to","Component","RepoBox","_this$props","item","nr","console","log","style","fontWeight","href","owner","html_url","src","avatar_url","alt","paddingBottom","name","login","stargazers_count","StyledGrid","styled","div","_templateObject","RepoGrid","items","_this2","newLang","location","pathname","substring","fetch","window","encodeURI","concat","then","response","json","setState","number","map","currentItem","components_RepoBox","Navigation","languages","BrowserRouter","lang","components_Button","Switch","Route","exact","path","component","langs","App","components_Navigation","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b553a35.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Button extends Component {\n\n    state = {\n        selected: false\n    }\n\n    render() {\n        const { language } = this.props;\n\n        return (\n            <button\n                className=\"btn\"\n                key={language}\n            >\n                <Link to={'/' + language}>{language}</Link>\n            </button>\n        )\n    }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport '../App.css';\n// import styled from 'styled-components';\n\n// const Box = styled.div`\n//     border-radius: 50%;\n//     width: 100px;\n//     height: 100px;\n// `;\n\n\nclass RepoBox extends Component {\n    state = {\n\n    }\n\n    render() {\n        const {item, nr} = this.props;\n\n        console.log(item);\n        return (\n            <div className=\"box\">\n                <p style={{ fontWeight: 'bolder' }}>#{nr}</p>\n                <a href={item.owner.html_url}>\n                    <img \n                    src={item.owner.avatar_url} \n                    alt={'item nr' + nr}\n                    className='round-img rotate-hover'\n                    style={{ paddingBottom: \"10px\" }}\n                />\n                </a>\n                <p \n                    className=\"crimson-colored\" \n                    style={{ fontWeight: 'bolder' }}\n                >\n                    {item.name}\n                </p>\n                <p>@{item.owner.login}</p>\n                <p>{item.stargazers_count} stars</p>\n            </div>\n        );\n    }\n}\n\nexport default RepoBox;","import React, { Component } from 'react';\nimport '../App.css';\nimport RepoBox from './RepoBox';\nimport styled from 'styled-components';\n\nconst clientId = '898f9e9639fc081d5302',\n    clientSecret = 'ff68f3cbf56aff311fd6e9615a15f9dad76938bb';\nlet language = 'all';\n// const encodedURI = window.encodeURI(`https://api.github.com/search/repositories?q=stars:>1+\n//         language:${language}&sort=stars&order=desc&type=Repositories&client_id=${clientId}\n//         &client_secret=${clientSecret}&`);\n\nconst getEncodedURI = (lang) => (\n        window.encodeURI(`https://api.github.com/search/repositories?q=stars:>1+\n        language:${language}&sort=stars&order=desc&type=Repositories&client_id=${clientId}\n        &client_secret=${clientSecret}&`)\n    );\n\nconst StyledGrid = styled.div`\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-gap: 50px;\n    padding: 100px 0;\n`;\n\nclass RepoGrid extends Component {\n\n    state = {\n        items: []\n    }\n\n    componentDidMount() {\n        const newLang = this.props.location.pathname.substring(1);\n        language = newLang !== \"\" ? newLang : 'all';\n        // console.log(getEncodedURI(language));\n        fetch(getEncodedURI())\n            .then(response => response.json())\n            .then(json => this.setState({ items: json.items }))\n            .then(() => console.log(this.state.items));\n    }\n\n    render() {\n        let number = 1;\n\n        return (\n            <StyledGrid>\n                {this.state.items.map(currentItem =>\n                    <RepoBox\n                        item={currentItem}\n                        key={number}\n                        nr={number++}\n                    />\n                )}\n            </StyledGrid>\n        );\n    }\n}\n\nexport default RepoGrid;","import React, { Component } from 'react';\nimport {\n    BrowserRouter as Router,\n    Link,\n    Route,\n    Switch,\n} from 'react-router-dom';\nimport '../App.css';\nimport Button from '../components/Button';\nimport RepoGrid from './RepoGrid';\n\nclass Navigation extends Component {\n\n    state = {\n        selected: 'all'\n    }\n\n    render() {\n        const { languages } = this.props;\n\n        return (\n            <Router>\n                <nav>\n                    {languages.map(lang =>\n                        <Button\n                            className=\"btn\"\n                            key={lang}\n                            language={lang}\n                        />\n                    )}\n\n                    <Switch>\n                        {languages.map(lang =>\n                            <Route\n                                exact path={'/' + lang}\n                                component={RepoGrid}\n                                key={lang}\n                                language={lang}\n                            />\n                        )}\n                    </Switch>\n                </nav>\n            </Router>\n        )\n    }\n}\n\nexport default Navigation;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navigation from './components/Navigation';\n\nconst langs = [\n\t'all', 'javascript', 'ruby', 'java', 'css', 'python'\n];\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Navigation languages={langs} />\n\n\t\t\t\t{/* <header>\n\t\t\t\t\t{langs.map(lang => \n\t\t\t\t\t\t<button \n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tkey={lang}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{lang}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)}\n\t\t\t\t</header> */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}